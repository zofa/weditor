package com.kraususa.widgetset;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.util.FilesystemContainer;
import com.vaadin.ui.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

public class processingQueueWidget extends CustomComponent {
    private final String outFileDir = "/errfiles/outfiles/";

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


    private AbsoluteLayout mainLayout;

    private HorizontalSplitPanel horizontalSplitPanel_1;

    private TextArea processingQueueFileContent;

    private Table processingTable;

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     * <p/>
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public processingQueueWidget() {
        buildMainLayout();
        FilesystemContainer fc = new FilesystemContainer(new File(outFileDir));
        processingTable = new Table("Re-processing queue");
        processingTable.setContainerDataSource(fc);
        processingTable.setSizeFull();
        processingTable.setSelectable(true);

        setCompositionRoot(mainLayout);

        processingTable.addListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(Property.ValueChangeEvent event) {
                if (null != processingTable.getValue()) {
                    Object rowId = event.getProperty().getValue();
                    BufferedReader br = null;
                    String selectedOutFile;
                    try {
                        selectedOutFile = outFileDir + processingTable.getContainerProperty(rowId, "NAME").getValue();
                        br = new BufferedReader(new FileReader(selectedOutFile));
                        StringBuilder sb = new StringBuilder();
                        String line = br.readLine();

                        while (line != null) {
                            sb.append(line);
                            sb.append("\n");
                            line = br.readLine();
                        }
                        processingQueueFileContent.setValue(sb.toString());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new AbsoluteLayout();
        mainLayout.setImmediate(false);
        mainLayout.setSizeFull();
        //mainLayout.setMargin(false);

        // top-level component properties
//		setWidth("100.0%");
//		setHeight("100.0%");

        // horizontalSplitPanel_1
        horizontalSplitPanel_1 = buildHorizontalSplitPanel_1();
        mainLayout.addComponent(horizontalSplitPanel_1);

        return mainLayout;
    }

    @AutoGenerated
    private HorizontalSplitPanel buildHorizontalSplitPanel_1() {
        // common part: create layout
        horizontalSplitPanel_1 = new HorizontalSplitPanel();
        horizontalSplitPanel_1.setImmediate(false);
        horizontalSplitPanel_1.setWidth("100.0%");
        horizontalSplitPanel_1.setHeight("100.0%");
        horizontalSplitPanel_1.setMargin(false);

        // processingTable
        processingTable = new Table();
        processingTable.setImmediate(true);
        processingTable.setSizeFull();
        horizontalSplitPanel_1.addComponent(processingTable);

        // processingQueueFileContent
        processingQueueFileContent = new TextArea();
        processingQueueFileContent.setImmediate(false);
        processingQueueFileContent.setWidth("100.0%");
        processingQueueFileContent.setHeight("100.0%");
        horizontalSplitPanel_1.addComponent(processingQueueFileContent);

        return horizontalSplitPanel_1;
    }

}
