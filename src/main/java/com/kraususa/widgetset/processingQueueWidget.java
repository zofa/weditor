package com.kraususa.widgetset;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.util.FilesystemContainer;
import com.vaadin.ui.*;
import org.apache.log4j.Logger;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;


public class processingQueueWidget extends CustomComponent {
    private static final String outFileDir = "/errfiles/outfiles/";
    private Logger logger = Logger.getLogger(getClass());
    /*- Vaadin EditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
    private HorizontalLayout mainLayout;
    private HorizontalSplitPanel hSplitPanel;
    private TextArea fileContainText;
    private Table processingTable;

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     * <p/>
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public processingQueueWidget() {
        buildMainLayout();
        setCompositionRoot(mainLayout);
    }

    @AutoGenerated
    private HorizontalLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new HorizontalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setSizeFull();
        mainLayout.setMargin(true);

        // top-level component properties
        setWidth("80.0%");
        setHeight("80.0%");

        // mainLayout.addComponent(new Label("Files in the processing queue."));

        mainLayout.addComponent(buildHorizontalSplitPanel_1());
        mainLayout.addComponent(hSplitPanel);
        return mainLayout;
    }

    @AutoGenerated
    private HorizontalSplitPanel buildHorizontalSplitPanel_1() {
        // common part: create layout
        hSplitPanel = new HorizontalSplitPanel();
        hSplitPanel.setImmediate(false);
        hSplitPanel.setWidth("100.0%");
        hSplitPanel.setHeight("100.0%");
        hSplitPanel.setMargin(false);

        // processingTable
        FilesystemContainer fc = new FilesystemContainer(new File(outFileDir));
        processingTable = new Table("Re-processing queue", fc);
        processingTable.setImmediate(true);
        processingTable.setSizeFull();
        processingTable.setNullSelectionAllowed(false);
        processingTable.setSelectable(true);
        processingTable.setFooterVisible(true);
        processingTable.setColumnCollapsingAllowed(true);
        processingTable.addListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(Property.ValueChangeEvent event) {
                if (processingTable.getValue() != null) {
                    Object rowId = event.getProperty().getValue();
                    BufferedReader br = null;
                    String selectedOutFile;
                    try {
                        selectedOutFile = outFileDir + processingTable.getContainerProperty(rowId, "Name").getValue();
                        br = new BufferedReader(new FileReader(selectedOutFile));
                        StringBuilder sb = new StringBuilder();
                        String line = br.readLine();

                        while (line != null) {
                            sb.append(line);
                            sb.append("\n");
                            line = br.readLine();
                        }
                        fileContainText.setReadOnly(false);
                        fileContainText.setValue(sb.toString());
                        fileContainText.setReadOnly(true);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });

        // fileContainText
        fileContainText = new TextArea();
        fileContainText.setImmediate(false);
        fileContainText.setWidth("100.0%");
        fileContainText.setHeight("100.0%");
        fileContainText.setReadOnly(true);
        hSplitPanel.addComponent(processingTable);
        hSplitPanel.addComponent(fileContainText);

        return hSplitPanel;
    }

}
